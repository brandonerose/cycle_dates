[{"name":"app.R","content":"library(shiny)\nlibrary(lubridate)\n\n# Utility functions\nnext_weekday <- function(x = Sys.Date(), week_start = 1) {\n  lubridate::ceiling_date(as.Date(x), unit = \"week\", week_start = week_start)\n}\n\nget_cycle_dates <- function(start_date,\n                            cycle_number,\n                            cycle_length,\n                            week_start = NA) {\n  start_date <- as.Date(start_date)\n  if (!is.na(week_start)) {\n    current_wday <- lubridate::wday(start_date, week_start = 1)\n    if (current_wday != week_start) {\n      start_date <- next_weekday(start_date, week_start = week_start)\n    }\n  }\n  cycle_dates <- start_date + seq(0, by = cycle_length, length.out = cycle_number)\n  cycle_dates\n}\n\npretty_date <- function(date, include_year = TRUE) {\n  date <- as.Date(date)\n  month <- as.integer(format(date, \"%m\"))\n  day <- as.integer(format(date, \"%d\"))\n  year <- as.integer(format(date, \"%y\"))\n  if(include_year){\n    final <- paste(month, day, year, sep = \"/\")\n  }else{\n    final <- paste(month, day, sep = \"/\")\n  }\n  final\n}\n\n# UI\nui <- fluidPage(\n  # titlePanel(\n  #   h1(\"Chemo Cycle Date Generator\", align = \"center\")\n  # ),\n  sidebarLayout(\n    sidebarPanel(\n      dateInput(\"start_date\", \"Start Date\", value = Sys.Date()),\n      numericInput(\n        inputId = \"cycle_number\",\n        label = \"Number of Cycles\",\n        value = 6,\n        min = 1\n      ),\n      numericInput(\n        inputId = \"cycle_length\",\n        label = \"Cycle Length (days)\",\n        value = 14,\n        min = 7,\n        step = 7\n      ),\n      selectInput(\n        inputId = \"week_start\",\n        label = \"Align to Weekday?\",\n        choices = c(\n          \"None\" = NA,\n          Monday = 1,\n          Tuesday = 2,\n          Wednesday = 3,\n          Thursday = 4,\n          Friday = 5,\n          Saturday = 6,\n          Sunday = 7\n        ),\n        selected = NA\n      ),\n      checkboxInput(\n        inputId = \"include_year\",\n        label = \"Include Year?\"\n      )\n    ),\n    mainPanel(\n      verbatimTextOutput(\"cycle_text\"),\n      verbatimTextOutput(\"cycle_text2\")\n    )\n  ),\n  tags$footer(strong(\"Written by Brandon Rose, MD, MPH using R, shiny, shinylive, and WebR.\"), # strong() = bold\n              align = \"center\",\n              style = \"\n                 position:center;\n                 bottom:11.5px;\n                 width:100%;\n                 height:20px;\n                 color: black;\n                 padding: 0px;\n                 z-index: 100;\n                \")\n)\n\n# Server\nserver <- function(input, output, session) {\n  output$cycle_text <- renderText({\n    week_start <- as.numeric(input$week_start)\n    if (is.na(week_start))\n      week_start <- NA\n    dates <- get_cycle_dates(\n      start_date = input$start_date,\n      cycle_number = input$cycle_number,\n      cycle_length = input$cycle_length,\n      week_start = week_start\n    )\n    text_lines <- paste0(\"C\",\n                         seq_along(dates),\n                         \": \",\n                         pretty_date(dates, include_year = input$include_year))\n    paste(text_lines, collapse = \"\\n\")\n  })\n\n  output$cycle_text2 <- renderText({\n    week_start <- as.numeric(input$week_start)\n    if (is.na(week_start))\n      week_start <- NA\n    dates <- get_cycle_dates(\n      start_date = input$start_date,\n      cycle_number = input$cycle_number,\n      cycle_length = input$cycle_length,\n      week_start = week_start\n    )\n    text_lines <- paste0(\"Dates: \", paste0(\n      pretty_date(dates, include_year = input$include_year),\n      collapse = \", \"\n    ))\n    text_lines\n  })\n}\n\n# Run the app\nshinyApp(ui, server)\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Hello Shiny!\nAuthor: RStudio, Inc.\nAuthorUrl: http://www.rstudio.com/\nLicense: MIT\nDisplayMode: Showcase\nTags: getting-started\nType: Shiny\n","type":"text"},{"name":"Readme.md","content":"This small Shiny application demonstrates Shiny's automatic UI updates. \n\nMove the *Number of bins* slider and notice how the `renderPlot` expression is automatically re-evaluated when its dependant, `input$bins`, changes, causing a histogram with a new number of bins to be rendered.\n","type":"text"}]
